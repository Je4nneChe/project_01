# задача 3

# нужно найти всех сотрудников,
# зарабатывающих, по крайней мере, 100 000 долларов в год

employees = {
    'Alice' : 100000,
    'Bob' : 99817,
    'Carol' : 122988,
    'Frank' : 88123,
    'Eve' : 93121
    }

# Вариант 1 - цикл (развернутый)
# что можно получить из словаря?
print(employees.keys())
print(employees.values()) # можно получить значения ключей
print(employees.items()) # можно получить пары - ключ+значение (dict_items([('Alice', 100000), ('Bob', 99817), ('Carol', 122988), ('Frank', 88123), ('Eve', 93121)]))
print(tuple(employees)) # кортеж ключей, значения теряются

top_mgrs = []
for name in employees.keys(): # на самом деле, можно убрать .keys()
    if employees[name] >= 100000:
        top_mgrs.append(name)

print(top_mgrs) # ['Alice', 'Carol']

# Вариант 2 - списковые включения (однострочники)

top_mgrs = [n for n in employees if employees[n] >= 100000] # совмещение for и if
print(top_mgrs) 

# Вариант 2.1 - списковые включения (однострочники) распаковка кортежей по каждой паре, которую вытаскиваем - супер
top_mgrs = [n for n, s in employees.items() if s >= 100000] # совмещение for и if 
print(top_mgrs) 

# # Что это?
# # Как условный оператор писать в одну строку
# x = 4
# if x > 0:
#     print('Больще 0')
# else:
#     print('Меньше 0')

#     print(
#         'Больще 0' if x > 0 else 'Меньше 0'
#     )    

# # используем for
# for i in [1, 2, 3]:
#     print(i**2)

# print(
#     [i**2 for i in [1, 2, 3]] # <generator object <genexpr> at 0x0000021308028110>
# )


# # Вспомним:
# lst = [1, 2, 3] # изменяемый объект
# tpl = (1, 2, 3) # неизменяемый объект
# str = 'Hello' # неизменяемый объект
# set = set((1, 2, 3)) # изменяемый объект

# # словарь - изменяемый объект
# dct = {}
# capitals = {'Россия': 'Москва', 'Италия': 'Рим'}

# print(capitals['Италия'])

# # добавить значение в словарь
# capitals['Франция'] = 'Париж'
# print(capitals)

# # dct1 = {[]:1, []:1} # нельзя изменяемые объекты делать ключами
# # dct2 = {1:{}, 2:{}} # можно изменяемые объекты делать значениями ключей



