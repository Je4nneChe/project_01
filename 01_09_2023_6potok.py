# -*- coding: utf-8 -*-
"""01_09_2023_6potok.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DyIBE7I5f3haRhmYQJwF3zAgMv9-gj4F
"""

# Задача 1
import sqlite3

connection = sqlite3.connect('teachers.db')
cursor = connection.cursor()
sqlquery = """INSERT INTO School (School_Id, School_Name, Place_Count)
VALUES
('1', 'Протон', 200),
('2', 'Преспектива', 300),
('3', 'Спектр', 400),
('4', 'Содружество', 500);
"""
cursor.execute(sqlquery)
connection.commit()
connection.close()

# Задача 2. Подключиться к БД и вывести ее версию
import sqlite3

def get_connection():
  connection = sqlite3.connect('teachers.db')
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def task2():
  try:
    con = get_connection()
    cursor = con.cursor()
    cursor.execute('SELECT sqlite_version();')
    version = cursor.fetchone()
    print ("Вы подключились к SQLite версии: ", version)
    close_connection(con)
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка вида ", error)


task2()

# Задача 3. Проставить опыт работы всем учителям

import sqlite3
def get_connection():
  connection = sqlite3.connect('teachers.db')
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def task3():
  try:
    con = get_connection()
    cursor = con.cursor()
    cursor.execute('UPDATE Teacher SET Experience = 20 WHERE School_Id = 4')
    con.commit()
    close_connection(con)
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка вида ", error)

task3()

#Задача 4. Вывести данные о школе и учителе,
# используя идентификатор школы и идентификатор учителя
import sqlite3

def get_connection():
  connection = sqlite3.connect('teachers.db')
  return connection

def close_connection(connection):
  if connection:
    connection.close()


def get_school(school_id):
  try:
    con = get_connection()
    cursor = con.cursor()
    sqlquery = 'SELECT * FROM School WHERE School_Id = ?'
    cursor.execute(sqlquery, (school_id,))
    school_info = cursor.fetchall()
    print ("Данные по школе")
    for row in school_info:
      print ("ID школы:", row[0])
      print ("Название школы:", row[1])
      print ("Количество мест:", row[2], '\n')
    close_connection(con)
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка вида ", error)

def get_teacher(teacher_id):
  try:
    con = get_connection()
    cursor = con.cursor()
    sqlquery = 'SELECT * FROM Teacher WHERE Teacher_Id = ?'
    cursor.execute(sqlquery, (teacher_id,))
    teacher_info = cursor.fetchall()
    print ("Данные по учителю")
    for row in teacher_info:
      print ("ID Учителя:", row[0])
      print ("Имя учителя:", row[1])
      print ("ID школы:", row[2])
      print ("Дата начала работы:", row[3])
      print ("Специализация:", row[4])
      print ("Зарплата:", row[5])
      print ("Опыт работы:", row[6])
    close_connection(con)
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка вида ", error)

x = int(input('Введи ID школы:'))
y = int(input('Введи ID учителя:'))
get_school(x)
get_teacher(y)

# Задача 5. Вывести список учителей по заданной специальности и зарплате
import sqlite3

def get_connection():
  connection = sqlite3.connect('teachers.db')
  return connection

def close_connection(connection):
  if connection:
    connection.close()



def get_teacher_detail(spec,sal):
  try:
    con = get_connection()
    cursor = con.cursor()
    sqlquery = 'SELECT * FROM Teacher WHERE Speciality = ? AND Salary > ?'
    cursor.execute(sqlquery, (spec,sal))
    teacher_info = cursor.fetchall()
    for row in teacher_info:
      print ("ID Учителя:", row[0])
      print ("Имя учителя:", row[1])
      print ("ID школы:", row[2])
      print ("Дата начала работы:", row[3])
      print ("Специализация:", row[4])
      print ("Зарплата:", row[5])
      print ("Опыт работы:", row[6], "\n")
    close_connection(con)
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка вида ", error)

get_teacher_detail("Физик",10000)

# Задача 6. Вывести список учителей по ID школы Первый способ через 2 функции
import sqlite3

def get_connection():
  connection = sqlite3.connect('teachers.db')
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def get_school_name(school_id):
  try:
    con = get_connection()
    cursor = con.cursor()
    sqlquery = 'SELECT * FROM School WHERE School_Id = ?'
    cursor.execute(sqlquery, (school_id,))
    school_info = cursor.fetchone()
    name = school_info[1]
    close_connection(con)
    return name
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка вида ", error)



def get_teacher_data(school_id):
  try:
    con = get_connection()
    cursor = con.cursor()
    sqlquery = 'SELECT * FROM Teacher WHERE School_Id = ?'
    cursor.execute(sqlquery, (school_id,))
    teacher_info = cursor.fetchall()
    for row in teacher_info:
      print ("ID Учителя:", row[0])
      print ("Имя учителя:", row[1])
      print ("ID школы:", row[2])
      print ("Название школы:", get_school_name(row[2]))
      print ("Дата начала работы:", row[3])
      print ("Специализация:", row[4])
      print ("Зарплата:", row[5])
      print ("Опыт работы:", row[6], "\n")
    close_connection(con)
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка вида ", error)


get_teacher_data(4)

# Задача 6. Вывести список учителей по ID школы Второй способ через JOIN
import sqlite3

def get_connection():
  connection = sqlite3.connect('teachers.db')
  return connection

def close_connection(connection):
  if connection:
    connection.close()


def get_teacher_data2(school_id):
  try:
    con = get_connection()
    cursor = con.cursor()
    sqlquery = 'SELECT * FROM Teacher JOIN School ON Teacher.School_Id = School.School_Id WHERE School.School_Id = ?'
    cursor.execute(sqlquery, (school_id,))
    teacher_info = cursor.fetchall()
    for row in teacher_info:
      print ("ID Учителя:", row[0])
      print ("Имя учителя:", row[1])
      print ("ID школы:", row[2])
      print ("Название школы:", row[8])
      print ("Дата начала работы:", row[3])
      print ("Специализация:", row[4])
      print ("Зарплата:", row[5])
      print ("Опыт работы:", row[6], "\n")
    close_connection(con)
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка вида ", error)


get_teacher_data2(3)

# Вывод наименования таблиц
import sqlite3

def get_connection():
  connection = sqlite3.connect('teachers.db')
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def table():
  try:
    con = get_connection()
    cursor = con.cursor()
    cursor.execute("""SELECT * FROM sqlite_master WHERE type = 'table'; """)
    tables = cursor.fetchall()
    for table in tables:
      #print(table) # Полная инфа о таблицах
      print(table[1]) # Название таблиц
    close_connection(con)
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка вида ", error)


table()

# Вывод наименования столбцов

import sqlite3

def get_connection():
  connection = sqlite3.connect('teachers.db')
  return connection

def close_connection(connection):
  if connection:
    connection.close()


def column():
  try:
    con = get_connection()
    cursor = con.cursor()
    cursor.execute("""SELECT * FROM Teacher;""")
    colnames = cursor.description
    for row in colnames:
      print (row[0])
    close_connection(con)
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка вида ", error)

column()