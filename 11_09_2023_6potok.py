# -*- coding: utf-8 -*-
#"""11_09_2023_6potok.ipynb

#Automatically generated by Colaboratory.

#Original file is located at
#    https://colab.research.google.com/drive/1eHs8l_ceb1GKhnsaMgRXhzd2wCQynKfx
#"""
#                                 Программирование на Python
#                                 Библиотека pandas - обзор
import sqlite3

con1 = sqlite3.connect("Students.db")
query = "SELECT * FROM Students"
df = pd.read_sql(query,con1)
print (df)

#con2 = sqlite3.connect("teachers.db")
#df.to_sql("Students", con2, index = False)
df.to_excel('students.xlsx', index = False)

import sqlite3
def test(student_id):
  con = sqlite3.connect("teachers.db")
  cur = con.cursor()
  query = "SELECT * FROM School JOIN Students ON School.School_Id = Students.School_Id WHERE Students.Student_Id = ?"
  cur.execute(query, (student_id,))
  result = cur.fetchall()
  con.close()
  print (result)

test(201)

import sqlite3

def get_school(school_id):
  con = sqlite3.connect("Schools.db")
  cur = con.cursor()
  query = "SELECT * FROM School WHERE School_Id = ?"
  cur.execute(query, (school_id,))
  result = cur.fetchall()
  con.close()
  print (result)
  return result[0][1]

import pandas as pd
import numpy as np

s = pd.Series(np.random.randn(5), index = ['a','b','c','d','e'])
print (s)
print (s['a'])

import pandas as pd

df = pd.DataFrame({'TEST': [1,2,3,4,5],
                   'A': [7,4,3,4,6],
                   'B': ['A','B','C','D','E']
                   })

print (df.columns)

# Task 1
# ➢Скачайте файл data.xlsx
# ➢Откройте его с помощью библиотеки pandas
# ➢Выберите все значения, где sku = капуста
# ➢Запишите датафрейм в файл task1 в формате csv

import pandas as pd

df = pd.read_excel('data.xlsx', sheet_name='Sheet1')
#df = df.replace('Яблоки', 'Помидоры')
#df.describe()
#df.to_excel('tata.xlsx',index = False)
print (df)

df2 = df[df['sku'] == 'Капуста']
df2.to_csv('task1.csv', index = False)

# Task 2
# ➢Скачайте файл data.xlsx
# ➢Выберете из всего датафрейма (data.xlsx) sku со значением Киви и ценой (priceoforder) больше 1000 рублей
# ➢Запишите датафрейм в файл task2 в формате xlsx 

import pandas as pd

df = pd.read_excel('data.xlsx', sheet_name='Sheet1')
kivi = df[df['sku'] == 'Киви']
price = kivi[kivi['priceoforder'] > 1000]
print (price)
price.to_excel('task2.xlsx', index = False)

# Task 3 ➢Скачайте файл data.xlsx
# ➢Выбрать все заказы где volume > 15 и вывести на экран полученный датафрейм
# ➢Выбрать из полученного датафрейма заказы где volume < 50 и записать данный датафрейм в excel файл под
# названием task3
# ➢Запишите датафрейм в файл task3 в формате xlsx

import pandas as pd

df = pd.read_excel('data.xlsx', sheet_name='Sheet1')
volume = df[df['volume'] > 15]
volume2 = volume[volume['volume'] < 50]
print (volume2)
volume2.to_excel('task3.xlsx', index = False)

import pandas as pd

con2 = sqlite3.connect("Schools.db")
#query = 'SELECT * FROM School'

df = pd.read_sql('SELECT * FROM data',con2)
print (df)

# Task 4
# ➢Скачайте файл Students.db
# ➢Создайте соединение с БД
# ➢Выгрузите содержимое таблицы Students в датафрейм
# ➢Полученный датафрейм запишите в формат xlsx под названием Task4.xlsx

import pandas as pd
con = sqlite3.connect("Schools.db")
df_school = pd.DataFrame({'School_Id': [5,6],
                          'School_Name': ["Ромашка", "Василек"],
                          'Place_Count': [100,100]})
df_school.to_sql("School",con,if_exists = 'append', index = False)

import pandas as pd
import sqlite3

df = pd.read_excel('data.xlsx', sheet_name='Sheet1')
con = sqlite3.connect("Students.db")
print(df)
df.to_sql("data",con)

# Task 5
# ➢Скачайте файл Students.db
# ➢Создайте соединение с БД
# ➢Добавьте к таблице Students датафрейм, содержащий 3-х новых студентов
# ➢Выгрузите полученный датафрейм запишите в формат xlsx под названием Task5.xlsx

import pandas as pd
import sqlite3

con = sqlite3.connect("Students.db")
newstd = pd.DataFrame({'Student_id': [205,206,207],
                       'Student_Name': ["Сергей", "Марина", "Елена"],
                       'School_id': [1,2,3]})
newstd.to_sql('Students', con, if_exists='append', index = False)

df = pd.read_sql('SELECT * FROM Students',con)
print(df)
df.to_excel('task5.xlsx', index = False)

# Task 6
# ➢Скачайте файл Students.db
# ➢Создайте соединение с БД
# ➢Создайте новую таблицу Cars, в таблице Cars должно быть 2
# колонки: Car, Student_Id (Student_Id должно соответстовать ID
# добавленным вами ранее студентам) – добавьте вашим
# студентам любые авто
# ➢Выведите и запишите датафрейм с Student_Name, Car в формат
# xlsx под названием Task6.xlsx

import pandas as pd
import sqlite3

con = sqlite3.connect("Students.db")
cars = pd.DataFrame({'Student_id': [205,206,207],
                       'Car': ["BWM", "Toyota", "KIA"]})
cars.to_sql('Cars', con, if_exists='append', index = False)

sqlquery = 'SELECT Students.Student_Name,Cars.Car FROM Students JOIN Cars ON Students.Student_id = Cars.Student_id'

joindf = pd.read_sql(sqlquery,con)
joindf.to_excel('task6.xlsx', index = False)

# Дополнительная задача 1
# Соединить таб-цы Учителя и Школы
# удалить одну одинаковую колонку, т.к. в обеих таб-цах
# есть одна одинаковая колонку
# в этом способе колонку сначала переименуем в School_Id123

import pandas as pd
import sqlite3

def get_teacher(school_id):
  con = sqlite3.connect("teachers.db")
  query = f"SELECT * FROM Teatcher JOIN School ON Teatcher.School_Id = School.School_Id WHERE School.School_ID = {school_id}"
  teacher_data = pd.read_sql(query,con)
  teacher_data.columns = ('Teatcher_Id','Teatcher_Name','School_Id','Joining_Date','Speciality','Salary','Experience','School_Id123','School_Name','Place_Count')
  teacher_data = teacher_data.drop('School_Id123', axis = 1)
  print(teacher_data)

get_teacher(1)

# а в этом способе вызываем обе таб-цы через def, объединяем их чере метод merge
# через общую колонку School_Id
# создаем третью таб-цу (df3 - Датафрейм) и колнка School_Id дублироваться не будет!
import pandas as pd
import sqlite3

def get_teat():
  con = sqlite3.connect("teachers.db")
  teacher_data = pd.read_sql('SELECT * FROM Teatcher',con)
  return teacher_data

def get_sch():
  con = sqlite3.connect("teachers.db")
  school_data = pd.read_sql('SELECT * FROM School',con)
  return school_data


df1 = get_teat()
df2 = get_sch()

df3 = df1.merge(df2,left_on='School_Id', right_on='School_Id')

#df4 = df3.head(3) -# (3) это количество строк, которые я хочу вывести, head (голова) - сверху
print (df3)

# как пройтись по таблице через цикл и вывести имена учителей (простой for здесь работать не будет):
# для этого открываем цикл for и назначаем переменные index и row и сказать, что мы будем проходить fd3 и
# указать метод iterrows без аргумента, внутри:

#for index, row in df3.iterrows():
#  print(row[1]) # [1] - это индекс колонки

# Интересная задачка:
# Считать данные из name.xlsx и id.xlsx
# Сделать выборку по первым 5 продуктам из name.xlsx в id.xlsx/
# Записать результаты в базу данных.
# Для каждого продукта создать отдельную таблицу и записать в БД SQLlite.
# Таблицы должны содержать следущие колонки: rosstat_id, rosstat_name, price_name,
# url, date_add, date_last_crowl, date_last_in_stock, rosstat_id, contributor_id, store_id

def write_data(val):                  # назначим какую-нибудь функцию write_data(запись данных), на входе какой-нибудь аргумент val
  df5 = df3[df3['School_Id'] == val]  # назначаем df5. равную в df3 обратимся к колонке School_Id и скажем, если она равна val, то запишем:
  df5.to_excel(f'teacher_{val}.xlsx', index = False) # в excel формат. строкой таб-ца Учителя с нашим значение val, без индекса

list4 = [1,2,3,4]                     # создадим лист школ 
for i in list4:                       #  для i в листе
  write_data(i)                       # запишем 

# эта же задача с файлами name.xlsx и id.xlsx:

import pandas as pd
import sqlite3

def write_df(id, df2):
  write = df2.to_sql(f'product_{id}',con,index = False, if_exists='append')

con = sqlite3.connect('products.db')                                # создаем соединение и базу данных products
# Считываем 2 файла name и id
name = pd.read_excel('name.xlsx',sheet_name='Sheet1')
id = pd.read_excel('id.xlsx',sheet_name='Sheet1')
# Объединяем датафрейм name и id
df = name.merge(id,left_on='rosstat_id', right_on='rosstat_id')
# Беру 5 строк из ДФ name
dfname = name.head(5)         # обращусь к исходному файлу name и возму 5 строк сверху
print (dfname)
# открываем цикл, будем проходится по DF
for index, row in dfname.iterrows(): # цикл будет проходить dfname с помощью метода iterrows
  id = row['rosstat_id']
  print(id)
  df2 = df[df['rosstat_id'] == id]   # обратимся при создании df2 к колонке rosstat_id, которая должна быть равна id
  df2 = df2.drop(['year','rosstat_weight','city_code'], axis = 1)
  write_df(id,df2)